namespace MessagingService.Bootstrapper
{
    using System;
    using System.IO;
    using System.Net.Http;
    using System.Net.Security;
    using System.Reflection;
    using System.Threading.Tasks;
    using System.Threading;
    using Common;
    using EventStore.Client;
    using Lamar;
    using Microsoft.AspNetCore.Authentication.JwtBearer;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.Extensions.Diagnostics.HealthChecks;
    using Microsoft.OpenApi.Models;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Serialization;
    using Shared.EventStore.EventStore;
    using Shared.EventStore.Extensions;
    using Shared.General;
    using Swashbuckle.AspNetCore.Filters;
    using System.Collections.Generic;
    using System.Linq;

    public class MiddlewareRegistry : ServiceRegistry
    {
        public MiddlewareRegistry() {

            this.AddHealthChecks()
                    .AddEventStore(Startup.EventStoreClientSettings,
                                   name: "Eventstore",
                                   failureStatus: HealthStatus.Unhealthy,
                                   tags: new string[] { "db", "eventstore" });

            this.AddSwaggerGen(c =>
                               {
                                   c.SwaggerDoc("v1", new OpenApiInfo
                                                      {
                                                          Title = "Messaging API",
                                                          Version = "1.0",
                                                          Description = "A REST Api to manage sending of various messages over different formats, currently only Email and SMS are supported.",
                                                          Contact = new OpenApiContact
                                                                    {
                                                                        Name = "Stuart Ferguson",
                                                                        Email = "golfhandicapping@btinternet.com"
                                                                    }
                                                      });
                                   // add a custom operation filter which sets default values
                                   c.OperationFilter<SwaggerDefaultValues>();
                                   c.ExampleFilters();

                                   //Locate the XML files being generated by ASP.NET...
                                   var directory = new DirectoryInfo(AppContext.BaseDirectory);
                                   var xmlFiles = directory.GetFiles("*.xml");

                                   //... and tell Swagger to use those XML comments.
                                   foreach (FileInfo fileInfo in xmlFiles)
                                   {
                                       c.IncludeXmlComments(fileInfo.FullName);
                                   }
                               });

            this.AddSwaggerExamplesFromAssemblyOf<SwaggerJsonConverter>();

            this.AddAuthentication(options =>
                                   {
                                       options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                                       options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
                                       options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
                                   })
                .AddJwtBearer(options =>
                              {
                                  options.BackchannelHttpHandler = new HttpClientHandler
                                                                   {
                                                                       ServerCertificateCustomValidationCallback =
                                                                           (message, certificate, chain, sslPolicyErrors) => true
                                                                   };
                                  options.Authority = ConfigurationReader.GetValue("SecurityConfiguration", "Authority");
                                  options.Audience = ConfigurationReader.GetValue("SecurityConfiguration", "ApiName");

                                  options.TokenValidationParameters = new Microsoft.IdentityModel.Tokens.TokenValidationParameters()
                                                                      {
                                                                          ValidateAudience = false,
                                                                          ValidAudience = ConfigurationReader.GetValue("SecurityConfiguration", "ApiName"),
                                                                          ValidIssuer = ConfigurationReader.GetValue("SecurityConfiguration", "Authority"),
                                                                      };
                                  options.IncludeErrorDetails = true;
                              });

            this.AddControllers().AddNewtonsoftJson(options =>
                                                    {
                                                        options.SerializerSettings.ReferenceLoopHandling = ReferenceLoopHandling.Ignore;
                                                        options.SerializerSettings.TypeNameHandling = TypeNameHandling.Auto;
                                                        options.SerializerSettings.Formatting = Formatting.Indented;
                                                        options.SerializerSettings.DateTimeZoneHandling = DateTimeZoneHandling.Utc;
                                                        options.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();
                                                    });

            Assembly assembly = this.GetType().GetTypeInfo().Assembly;
            this.AddMvcCore().AddApplicationPart(assembly).AddControllersAsServices();
        }
    }
}
